// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  username String @unique
  sessionToken String?
  bio String?
  email String @unique
  emailVerified DateTime?
  image String?
  coverImage String?
  profileImage String?
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hasNotifications Boolean @default(false)

  posts Post[]
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String

  authorId String @db.ObjectId 
  image String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes Like[]
}

model Comment {

  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  
  authorId String @db.ObjectId
  postId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  likes Like[]
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId
 
  likedId String @db.ObjectId @unique
  userId String @db.ObjectId

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [likedId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [likedId], references: [id], onDelete: Cascade)
}
  
model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId
    
  followerId String @db.ObjectId 
  followingId String @db.ObjectId

  createdAt DateTime @default(now()) 
}

 model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  type NotificationType
  body String
  eventId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

enum NotificationType {
  FOLLOW
  UNFOLLOW
  LIKE
  UNLIKE
  COMMENT
  POST
}
